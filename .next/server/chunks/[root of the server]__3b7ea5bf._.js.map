{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/pages/api/exams/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport AntiCheating from \"../../components/AntiCheating\";\nimport { useSession } from \"next-auth/react\";\n\n// Import NextAuth server-side helper and your auth options\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"../../app/api/auth/[...nextauth]/authOptions\";\nimport connectToDatabase from \"../../lib/db\";\nimport Exam from \"../../models/exam\";\n\nexport default function ExamPage({ exam }) {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n\n  // Record the user's selected answers.\n  const [userAnswers, setUserAnswers] = useState({});\n  // Track whether the exam is submitted.\n  const [submitted, setSubmitted] = useState(false);\n  // For cheating detection.\n  const [cheatingCount, setCheatingCount] = useState(0);\n  // Total time taken (in seconds) across all questions.\n  const [timeTaken, setTimeTaken] = useState(0);\n\n  // For per-question handling:\n  const QUESTION_TIME = 20; // seconds per question\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [questionTimeLeft, setQuestionTimeLeft] = useState(QUESTION_TIME);\n\n  // ---------------------\n  // Timer effect for each question.\n  useEffect(() => {\n    if (submitted) return;\n\n    // Set up a timer that ticks every second.\n    const timer = setInterval(() => {\n      setQuestionTimeLeft((prevTime) => {\n        if (prevTime <= 1) {\n          proceedToNextQuestion(); // timeâ€™s up for this question: move on\n          return QUESTION_TIME; // reset timer for next (if any)\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [submitted, currentQuestionIndex]);\n\n  // Proceed to next question\n  const proceedToNextQuestion = () => {\n    // Increment total time taken by adding the elapsed time for this question.\n    setTimeTaken((prev) => prev + (QUESTION_TIME - questionTimeLeft));\n\n    // If the current question is the last one, then submit the exam; otherwise move on.\n    if (currentQuestionIndex < exam.questions.length - 1) {\n      setCurrentQuestionIndex((prev) => prev + 1);\n      setQuestionTimeLeft(QUESTION_TIME);\n    } else {\n      // End the exam\n      handleSubmit();\n    }\n  };\n\n  // Called when the user selects an option.\n  const handleOptionChange = (selectedOption) => {\n    // Record answer for the current question.\n    setUserAnswers((prev) => ({\n      ...prev,\n      [currentQuestionIndex]: selectedOption,\n    }));\n    // Immediately move to the next question.\n    proceedToNextQuestion();\n  };\n\n  // When the exam is finished.\n  const handleSubmit = async () => {\n    if (submitted) return;\n    setSubmitted(true);\n\n    // Calculate the score.\n    const correctCount = exam.questions.reduce((count, question, idx) => {\n      return userAnswers[idx] === question.correctAnswer ? count + 1 : count;\n    }, 0);\n    const total = exam.questions.length;\n    // Here a passing score threshold is provided (modify as needed)\n    const passingScore = 40;\n    const passed = correctCount >= passingScore;\n\n    // Aggregate the result including total time from each question.\n    const resultData = {\n      userId: session?.user?.id,\n      examId: exam._id,\n      userName: session?.user?.name,\n      examName: exam.title,\n      score: correctCount,\n      total,\n      passed,\n      timeTaken, // total seconds taken for the exam\n      cheatingCount,\n      createdAt: new Date(),\n    };\n\n    await onExamSubmit(resultData);\n  };\n\n  const handleCheatingDetected = () => {\n    setCheatingCount((prev) => prev + 1);\n  };\n\n  // If the exam has no questions (unlikely) or hasn't loaded.\n  if (!exam.questions || exam.questions.length === 0) {\n    return <p>No questions found.</p>;\n  }\n\n  // Only show the current question.\n  const currentQuestion = exam.questions[currentQuestionIndex];\n\n  return (\n    <div className=\"relative\">\n      {status === \"loading\" ? (\n        <p>Loading...</p>\n      ) : (\n        <>\n          <AntiCheating onCheatingDetected={handleCheatingDetected} />\n          <div className=\"p-6 max-w-3xl mx-auto\">\n            <Head>\n              <title>{exam.title}</title>\n            </Head>\n            <h1 className=\"text-3xl font-bold mb-6\">{exam.title}</h1>\n            <h2 className=\"text-xl mb-4\">\n              Question {currentQuestionIndex + 1} of {exam.questions.length}\n            </h2>\n            <div className=\"bg-white shadow-md rounded-lg p-4 mb-6 border border-gray-200\">\n              <p className=\"text-lg font-medium mb-3\">\n                {currentQuestion.questionText}\n              </p>\n              <div>\n                {currentQuestion.options.map((option, i) => (\n                  <label\n                    key={i}\n                    className=\"block p-2 mb-2 border rounded cursor-pointer hover:bg-gray-100\"\n                    onClick={() => handleOptionChange(option)}\n                  >\n                    <input\n                      type=\"radio\"\n                      name={`question-${currentQuestionIndex}`}\n                      value={option}\n                      className=\"mr-2\"\n                      readOnly\n                    />\n                    {option}\n                  </label>\n                ))}\n              </div>\n              <div className=\"mt-3\">\n                <p className=\"text-sm text-gray-500\">\n                  Time left for this question: {questionTimeLeft} seconds\n                </p>\n              </div>\n            </div>\n            {/* Optionally show a Next button if you want to allow skipping manually.\n                Uncomment the button below if desired.  */}\n            {/* {!submitted && (\n              <button\n                onClick={proceedToNextQuestion}\n                className=\"bg-blue-600 text-white px-6 py-2 rounded\"\n              >\n                Next\n              </button>\n            )} */}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\n// onExamSubmit: Submits exam results and triggers certificate generation if passed.\nasync function onExamSubmit(resultData) {\n  try {\n    // Save exam result.\n    const resultRes = await fetch(\"/api/exams/result\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(resultData),\n      cache: \"no-store\",\n    });\n    const resultJson = await resultRes.json();\n    if (!resultRes.ok) {\n      console.error(resultJson.message);\n      return;\n    }\n\n    // If passed, automatically generate certificate.\n    if (resultData.passed) {\n      const certRes = await fetch(\"/api/certificate/generate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          userId: resultData.userId,\n          examId: resultData.examId,\n          userName: resultData.userName,\n          examName: resultData.examName,\n          passed: resultData.passed,\n        }),\n        cache: \"no-store\",\n      });\n      const certJson = await certRes.json();\n      if (certRes.ok) {\n        alert(\"Certificate generated! Certificate Number: \" + certJson.certificateNumber);\n        // Optionally: redirect or handle certificate presentation.\n      } else {\n        console.error(certJson.message);\n      }\n    }\n  } catch (error) {\n    console.error(\"Submission error:\", error);\n  }\n}\n\nexport async function getServerSideProps(context) {\n  // Verify user is authenticated.\n  const session = await getServerSession(\n    context.req,\n    context.res,\n    authOptions\n  );\n  if (!session) {\n    return { redirect: { destination: \"/sign-in\", permanent: false } };\n  }\n\n  try {\n    await connectToDatabase();\n    const exam = await Exam.findById(context.params.id);\n    if (!exam || !exam.questions) {\n      return { notFound: true };\n    }\n    // Convert exam data for Next.js.\n    const examObj = JSON.parse(JSON.stringify(exam));\n    return { props: { exam: examObj } };\n  } catch (error) {\n    console.error(\"Error fetching exam:\", error);\n    return { notFound: true };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}