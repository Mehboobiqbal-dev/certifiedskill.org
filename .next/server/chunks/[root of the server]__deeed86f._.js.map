{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/get-certified/pages/models/user.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: false,\n  },\n});\n\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema);\n\nexport default User;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/get-certified/lib/db.js"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGO_URI = process.env.MONGO_URI;\n\nif (!MONGO_URI) {\n  throw new Error(\"Please define the MONGO_URI environment variable\");\n}\n\nasync function connectToDatabase() {\n  if (mongoose.connection.readyState === 1) {\n    return mongoose;\n  }\n  const opts = {\n    bufferCommands: false,\n  };\n  await mongoose.connect(MONGO_URI, opts);\n  return mongoose;\n}\n\nexport default connectToDatabase;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,SAAS;AAEvC,IAAI,CAAC,WAAW;IACd,MAAM,IAAI,MAAM;AAClB;AAEA,eAAe;IACb,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;QACxC,OAAO,yGAAA,CAAA,UAAQ;IACjB;IACA,MAAM,OAAO;QACX,gBAAgB;IAClB;IACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,WAAW;IAClC,OAAO,yGAAA,CAAA,UAAQ;AACjB;uCAEe","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/get-certified/app/api/auth/signup/route.ts"],"sourcesContent":["import bcrypt from \"bcryptjs\";\nimport { NextResponse } from \"next/server\";\nimport User from \"../../../../pages/models/user\";\nimport connectToDatabase from \"../../../../lib/db\";\n\nexport async function POST(request: Request) {\n  try {\n    // Destructure without recaptchaToken\n    const { name, email, password, confirmPassword } = await request.json();\n\n    // Validate required fields\n    if (!name || !email || !password || !confirmPassword) {\n      return NextResponse.json(\n        { message: \"All fields are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate email format\n    const isValidEmail = (email: string) =>\n      /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    if (!isValidEmail(email)) {\n      return NextResponse.json(\n        { message: \"Invalid email format\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate password length\n    if (password.length < 6) {\n      return NextResponse.json(\n        { message: \"Password must be at least 6 characters long\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate matching passwords\n    if (password !== confirmPassword) {\n      return NextResponse.json(\n        { message: \"Passwords do not match\" },\n        { status: 400 }\n      );\n    }\n\n    // Connect to database\n    await connectToDatabase();\n\n    // Check if the user already exists\n    const existingUser = await (User as any).findOne({ email }).exec();\n    if (existingUser) {\n      return NextResponse.json(\n        { message: \"User already exists\" },\n        { status: 400 }\n      );\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create and save the new user\n    const newUser = new User({\n      name,\n      email,\n      password: hashedPassword,\n    });\n\n    await newUser.save();\n\n    return NextResponse.json(\n      { message: \"User registered successfully\" },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Error in register API:\", error);\n    return NextResponse.json(\n      { message: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,qCAAqC;QACrC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErE,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,eAAe,CAAC,QACpB,6BAA6B,IAAI,CAAC;QACpC,IAAI,CAAC,aAAa,QAAQ;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAuB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA8C,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,8BAA8B;QAC9B,IAAI,aAAa,iBAAiB;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAyB,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAiB,AAAD;QAEtB,mCAAmC;QACnC,MAAM,eAAe,MAAM,AAAC,yHAAA,CAAA,UAAI,CAAS,OAAO,CAAC;YAAE;QAAM,GAAG,IAAI;QAChE,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAsB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,+BAA+B;QAC/B,MAAM,UAAU,IAAI,yHAAA,CAAA,UAAI,CAAC;YACvB;YACA;YACA,UAAU;QACZ;QAEA,MAAM,QAAQ,IAAI;QAElB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA+B,GAC1C;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}