{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/pages/_document.js"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body className=\"antialiased\">\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;;;;;0BACL,qKAAC;gBAAK,WAAU;;kCACd,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/pages/_app.js"],"sourcesContent":["import \"../styles/globals.css\";\n\nimport { SessionProvider } from \"next-auth/react\";\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <SessionProvider session={pageProps.session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n}"],"names":[],"mappings":";;;;AAEA;;;;AAEe,SAAS,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE;IACpD,qBACE,qKAAC,mIAAA,CAAA,kBAAe;QAAC,SAAS,UAAU,OAAO;kBACzC,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/pages/exam/%5Bid%5D.js"],"sourcesContent":["import connectToDatabase from '../../../lib/db';\nimport { ObjectId } from 'mongodb';\n\nexport default async function handler(req, res) {\n  if (req.method !== \"GET\") {\n    return res.status(405).json({ message: \"Method Not Allowed\" });\n  }\n\n  try {\n    // Destructure { db } from the object returned by connectToDatabase()\n    const { db } = await connectToDatabase();\n    const { id } = req.query;\n\n    // Validate the ObjectId\n    if (!ObjectId.isValid(id)) {\n      return res.status(400).json({ message: \"Invalid Exam ID\" });\n    }\n\n    // Query the database for the exam\n    const exam = await db.collection(\"exams\").findOne({ _id: new ObjectId(id) });\n\n    if (!exam) {\n      return res.status(404).json({ message: \"Exam Not Found\" });\n    }\n\n    res.status(200).json(exam);\n  } catch (error) {\n    console.error(\"MongoDB Fetch Error:\", error);\n    res.status(500).json({ message: \"Internal Server Error\", error: error.message });\n  }\n}\n\n"],"names":[],"mappings":";;;;;;;;AACA;;;AAEe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,IAAI,IAAI,MAAM,KAAK,OAAO;QACxB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAAqB;IAC9D;IAEA,IAAI;QACF,qEAAqE;QACrE,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,KAAK;QAExB,wBAAwB;QACxB,IAAI,CAAC,uGAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,KAAK;YACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;YAAkB;QAC3D;QAEA,kCAAkC;QAClC,MAAM,OAAO,MAAM,GAAG,UAAU,CAAC,SAAS,OAAO,CAAC;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAI;QAE1E,IAAI,CAAC,MAAM;YACT,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;YAAiB;QAC1D;QAEA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;YAAyB,OAAO,MAAM,OAAO;QAAC;IAChF;AACF","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}