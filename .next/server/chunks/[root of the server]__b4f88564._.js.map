{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/pages/api/certificate/generate.js"],"sourcesContent":["// pages/api/certificate/generate.js\nimport PDFDocument from 'pdfkit';\nimport { v4 as uuidv4 } from 'uuid';\nimport clientPromise from '../../../lib/mongodb';\nimport { Readable } from 'stream';\n// Optionally, import qrcode if you want to generate a QR code\n// import QRCode from 'qrcode';\n\nexport default async function handler(req, res) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method Not Allowed' });\n  }\n\n  try {\n    // Expected payload: { userId, userName, examName, passed }\n    const { userId, userName, examName, passed } = req.body;\n    if (!passed) {\n      return res.status(400).json({ message: 'User did not pass the exam' });\n    }\n\n    // Generate a unique certificate number\n    const certificateNumber = uuidv4();\n\n    // Create a PDF certificate using PDFKit\n    const doc = new PDFDocument({ size: 'A4', layout: 'landscape' });\n    let buffers = [];\n    doc.on('data', buffers.push.bind(buffers));\n    doc.on('end', async () => {\n      const pdfData = Buffer.concat(buffers);\n\n      // Optionally, you could generate a QR code that links to your verification page:\n      // const qrDataURL = await QRCode.toDataURL(`https://yourdomain.com/verify-certificate?certificateNumber=${certificateNumber}`);\n\n      // Save certificate record in MongoDB\n      const client = await clientPromise;\n      const db = client.db();\n      await db.collection('certificates').insertOne({\n        userId,\n        userName,\n        examName,\n        certificateNumber,\n        issuedAt: new Date()\n        // Optionally, you can store pdfData or a reference to where it's stored\n      });\n\n      // Return the certificate number (and download URL if implemented)\n      res.status(200).json({ certificateNumber });\n    });\n\n    // Create the certificate content\n    doc.fontSize(30).text('Certificate of Achievement', { align: 'center' });\n    doc.moveDown();\n    doc.fontSize(20).text(`This certifies that ${userName}`, { align: 'center' });\n    doc.moveDown();\n    doc.text(`has successfully passed the exam for ${examName}`, { align: 'center' });\n    doc.moveDown();\n    doc.text(`Certificate Number: ${certificateNumber}`, { align: 'center' });\n    doc.moveDown();\n    doc.text(`Issued on: ${new Date().toLocaleDateString()}`, { align: 'center' });\n    // Optionally, add a QR code image if you generated one\n\n    doc.end();\n  } catch (error) {\n    console.error('Error generating certificate:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n}\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;AACpC;AACA;;;;;;AAEA;;;;;;;;;AAIe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAAqB;IAC9D;IAEA,IAAI;QACF,2DAA2D;QAC3D,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,IAAI;QACvD,IAAI,CAAC,QAAQ;YACX,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;YAA6B;QACtE;QAEA,uCAAuC;QACvC,MAAM,oBAAoB,CAAA,GAAA,wGAAA,CAAA,KAAM,AAAD;QAE/B,wCAAwC;QACxC,MAAM,MAAM,IAAI,qGAAA,CAAA,UAAW,CAAC;YAAE,MAAM;YAAM,QAAQ;QAAY;QAC9D,IAAI,UAAU,EAAE;QAChB,IAAI,EAAE,CAAC,QAAQ,QAAQ,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,EAAE,CAAC,OAAO;YACZ,MAAM,UAAU,OAAO,MAAM,CAAC;YAE9B,iFAAiF;YACjF,gIAAgI;YAEhI,qCAAqC;YACrC,MAAM,SAAS,MAAM;YACrB,MAAM,KAAK,OAAO,EAAE;YACpB,MAAM,GAAG,UAAU,CAAC,gBAAgB,SAAS,CAAC;gBAC5C;gBACA;gBACA;gBACA;gBACA,UAAU,IAAI;YAEhB;YAEA,kEAAkE;YAClE,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE;YAAkB;QAC3C;QAEA,iCAAiC;QACjC,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,8BAA8B;YAAE,OAAO;QAAS;QACtE,IAAI,QAAQ;QACZ,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,oBAAoB,EAAE,UAAU,EAAE;YAAE,OAAO;QAAS;QAC3E,IAAI,QAAQ;QACZ,IAAI,IAAI,CAAC,CAAC,qCAAqC,EAAE,UAAU,EAAE;YAAE,OAAO;QAAS;QAC/E,IAAI,QAAQ;QACZ,IAAI,IAAI,CAAC,CAAC,oBAAoB,EAAE,mBAAmB,EAAE;YAAE,OAAO;QAAS;QACvE,IAAI,QAAQ;QACZ,IAAI,IAAI,CAAC,CAAC,WAAW,EAAE,IAAI,OAAO,kBAAkB,IAAI,EAAE;YAAE,OAAO;QAAS;QAC5E,uDAAuD;QAEvD,IAAI,GAAG;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAAwB;IAC1D;AACF","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;;;;;yMAGzBD,QAAAA,EAAMC,kIAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,kIAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}