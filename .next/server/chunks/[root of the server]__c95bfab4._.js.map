{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/certifiedskill.org/models/user.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n});\r\n\r\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema);\r\n\r\nexport default User;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/certifiedskill.org/lib/db.js"],"sourcesContent":["// lib/db.js\nimport mongoose from 'mongoose';\n\nif (!process.env.MONGO_URI) {\n  throw new Error('Please define the MONGO_URI environment variable');\n}\n\n// Use a global variable to cache the connection in development.\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connectToDatabase() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n  \n  if (!cached.promise) {\n    cached.promise = mongoose.connect(process.env.MONGO_URI)\n      .then((mongoose) => mongoose.connection);\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connectToDatabase;\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,SAAS,EAAE;IAC1B,MAAM,IAAI,MAAM;AAClB;AAEA,gEAAgE;AAChE,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS,EACpD,IAAI,CAAC,CAAC,WAAa,SAAS,UAAU;IAC3C;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/certifiedskill.org/app/api/auth/%5B...nextauth%5D/authOptions.js"],"sourcesContent":["// authOptions.js\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport User from \"../../../../models/user\";\r\nimport connectToDatabase from \"../../../../lib/db\";\r\n\r\nexport const authOptions = {\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\", placeholder: \"you@example.com\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials || !credentials.email || !credentials.password) {\r\n          throw new Error(\"Email and Password must be provided\");\r\n        }\r\n        await connectToDatabase();\r\n        const user = await User.findOne({ email: credentials.email });\r\n        if (!user) {\r\n          throw new Error(\"No user found with that email.\");\r\n        }\r\n        const isValidPassword = await bcrypt.compare(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n        if (!isValidPassword) {\r\n          throw new Error(\"Invalid password.\");\r\n        }\r\n        return user;\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user._id.toString();\r\n        token.email = user.email;\r\n        token.name = user.name;\r\n        token.role = user.role || \"student\";\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user = {\r\n          id: token.id,\r\n          email: token.email,\r\n          name: token.name,\r\n          role: token.role || \"student\",\r\n        };\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/sign-in\",\r\n  },\r\n  // Ensure NEXTAUTH_SECRET is defined in your environment.\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;AACjB;AACA;AACA;AACA;;;;;AAEO,MAAM,cAAc;IACzB,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAQ,aAAa;gBAAkB;gBACtE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,eAAe,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,QAAQ,EAAE;oBAC/D,MAAM,IAAI,MAAM;gBAClB;gBACA,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAiB,AAAD;gBACtB,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAAE,OAAO,YAAY,KAAK;gBAAC;gBAC3D,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,MAAM;gBAClB;gBACA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAEf,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,MAAM;gBAClB;gBACA,OAAO;YACT;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,QAAQ;gBAC5B,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,IAAI,GAAG,KAAK,IAAI,IAAI;YAC5B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,GAAG;oBACb,IAAI,MAAM,EAAE;oBACZ,OAAO,MAAM,KAAK;oBAClB,MAAM,MAAM,IAAI;oBAChB,MAAM,MAAM,IAAI,IAAI;gBACtB;YACF;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,yDAAyD;IACzD,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC","debugId":null}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/certifiedskill.org/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["// route.js\r\nimport NextAuth from \"next-auth\";\r\nimport { authOptions } from \"./authOptions\";\r\n\r\n// Force dynamic rendering so Next.js wonâ€™t pre-render this API route.\r\nexport const dynamic = \"force-dynamic\";\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\n// Export GET and POST handlers for the App Router API route.\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":"AAAA,WAAW;;;;;;AACX;AACA;;;AAGO,MAAM,UAAU;AAEvB,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,yJAAA,CAAA,cAAW","debugId":null}}]
}