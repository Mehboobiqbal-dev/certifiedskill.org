{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/models/user.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: false,\n  },\n});\n\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema);\n\nexport default User;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF;AAEA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE7C","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/lib/db.js"],"sourcesContent":["// lib/db.js\nimport mongoose from 'mongoose';\n\nif (!process.env.MONGO_URI) {\n  throw new Error('Please define the MONGO_URI environment variable');\n}\n\n// Use a global variable to cache the connection in development.\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connectToDatabase() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n  \n  if (!cached.promise) {\n    cached.promise = mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    }).then(() => mongoose.connection);\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connectToDatabase;\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,SAAS,EAAE;IAC1B,MAAM,IAAI,MAAM;AAClB;AAEA,gEAAgE;AAChE,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS,EAAE;YACvD,iBAAiB;YACjB,oBAAoB;QACtB,GAAG,IAAI,CAAC,IAAM,yGAAA,CAAA,UAAQ,CAAC,UAAU;IACnC;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/app/api/auth/%5B...nextauth%5D/authOptions.js"],"sourcesContent":["import CredentialsProvider from \"next-auth/providers/credentials\";\nimport GithubProvider from \"next-auth/providers/github\";\nimport User from \"../../../../models/user\";\nimport connectToDatabase from \"../../../../lib/db\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions = {\n  session: {\n    strategy: \"jwt\",\n  },\n  providers: [\n    GithubProvider({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: {\n          label: \"Email\",\n          type: \"text\",\n          placeholder: \"you@example.com\"\n        },\n        password: {\n          label: \"Password\",\n          type: \"password\"\n        },\n      },\n      async authorize(credentials) {\n        try {\n          await connectToDatabase();\n          // Find the user by email\n          const user = await User.findOne({ email: credentials?.email });\n          if (!user)\n            throw new Error(\"No user found with that email.\");\n          // Compare the password with the hashed password\n          const isValidPassword = await bcrypt.compare(\n            credentials?.password || \"\",\n            user.password\n          );\n          if (!isValidPassword)\n            throw new Error(\"Invalid password.\");\n          return user;\n        } catch (error) {\n          console.error(\"Authorize error:\", error);\n          return null;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async signIn({ account, profile }) {\n      if (account?.provider === \"github\") {\n        await connectToDatabase();\n        const existingUser = await User.findOne({ email: profile?.email });\n        if (!existingUser) {\n          await User.create({\n            name: profile?.name || profile?.login,\n            email: profile?.email,\n            role: \"student\",\n          });\n        }\n      }\n      return true;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user._id.toString();\n        token.email = user.email;\n        token.name = user.name;\n        token.role = user.role || \"student\";\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user = {\n          id: token.id,\n          email: token.email,\n          name: token.name,\n          role: token.role || \"student\",\n        };\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/sign-in\",\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAAc;IACzB,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBACL,OAAO;oBACP,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBACR,OAAO;oBACP,MAAM;gBACR;YACF;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAiB,AAAD;oBACtB,yBAAyB;oBACzB,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAAE,OAAO,aAAa;oBAAM;oBAC5D,IAAI,CAAC,MACH,MAAM,IAAI,MAAM;oBAClB,gDAAgD;oBAChD,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,aAAa,YAAY,IACzB,KAAK,QAAQ;oBAEf,IAAI,CAAC,iBACH,MAAM,IAAI,MAAM;oBAClB,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,oBAAoB;oBAClC,OAAO;gBACT;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,QAAO,EAAE,OAAO,EAAE,OAAO,EAAE;YAC/B,IAAI,SAAS,aAAa,UAAU;gBAClC,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAiB,AAAD;gBACtB,MAAM,eAAe,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAAE,OAAO,SAAS;gBAAM;gBAChE,IAAI,CAAC,cAAc;oBACjB,MAAM,gHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;wBAChB,MAAM,SAAS,QAAQ,SAAS;wBAChC,OAAO,SAAS;wBAChB,MAAM;oBACR;gBACF;YACF;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,QAAQ;gBAC5B,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,IAAI,GAAG,KAAK,IAAI,IAAI;YAC5B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,GAAG;oBACb,IAAI,MAAM,EAAE;oBACZ,OAAO,MAAM,KAAK;oBAClB,MAAM,MAAM,IAAI;oBAChB,MAAM,MAAM,IAAI,IAAI;gBACtB;YACF;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///home/user/get-certified/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authOptions } from \"./authOptions\";\n\n// Force dynamic rendering to prevent Next.js from pre-rendering the API route.\nexport const dynamic = \"force-dynamic\";\n\nconst handler = NextAuth(authOptions);\n\n// Export GET and POST handlers.\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,MAAM,UAAU;AAEvB,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,yJAAA,CAAA,cAAW","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}